package pack;

public class Calc {
	static double d_rash_100_km, d_calc_topl, d_calc_km, d_km, d_price,
	res_rash_100km, res_rash, res_price, res_price_1km;
	/* Переменные типа double - с плавающей точкой. служат для представления чисел, имеющих дробную часть */
	/*static позволяет определять статические методы. Это такие методы, которые являются общими для класса, а не для
	отдельного объекта этого класса. Также они могут работать лишь со статическими полями класса.К статическим методам 
	и переменным можно обращаться через имя класса.*/

	public static void gettext() {/*Класс gettext, который доступен для любого файла из пакета pack */
		/*  Модификатор доступа public означает, что метод виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта в памяти, чтобы использовать этот метод.
	    void означает, что метод не возвращает данных в программу, которая его вызвала.
	    Метод с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */
		if (Index.int_calc==0){
			d_rash_100_km = Double.parseDouble(Index.rash_100_km.getText());
		} else {
			d_calc_topl = Double.parseDouble(Index.calc_topl.getText());
			d_calc_km = Double.parseDouble(Index.calc_km.getText());
		}
		d_km = Double.parseDouble(Index.km.getText());
		d_price = Double.parseDouble(Index.price.getText());	

		/* В переменную  записываются данные введеные пользователем в текстовое поле которое расположено в файле Index.
		Преобразование данных в тип Double. */
		
	}

	public static void calc_topl() {/*Класс, который доступен для любого файла из пакета pack */
		/*  Модификатор доступа public означает, что метод виден и доступен любому классу.
	    static означает, что не нужно создавать экземпляр(копию) объекта в памяти, чтобы использовать этот метод.
	    void означает, что метод не возвращает данных в программу, которая его вызвала.
	    Метод с пустыми скобками, это означает, что метод не имеет аргументов(параметров)
	    */

		/* Если пользователь ввел внутренние размеры, то нужно рассчитать внешние размеры коробки и объем.
		 * Если пользователь ввел внешние размеры, то нужно рассчитать внутренние размеры коробки и объем. */
		if (Index.int_calc==1){ //переменная которая отвечает за то нажат флажок рассчитать или нет (1-да)
			res_rash_100km=d_calc_topl/d_calc_km*100;
			/*Для того чтобы рассчитать средний расход топливо на 100 км нужно количество израсходованного топлива разделить
			 * на преодоленное расстояние. После этого умножим на 100. */
		} else {
			res_rash_100km=d_rash_100_km;
		}
			res_rash=res_rash_100km/100*d_km;
			res_price=res_rash*d_price;
			res_price_1km=res_price/d_km;
					
		//форматированный вывод
	    String str_res_rash_100km = String.format("%.2f", res_rash_100km);
	    String str_res_rash = String.format("%.2f", res_rash);
	    String str_res_price = String.format("%.2f", res_price);
	    String str_res_price_1km = String.format("%.2f", res_price_1km);
	    /* String - указываем что переменная будет иметь строковый тип,
	     * String_sred_100km_1 - название новой переменной,
	     * String.format - преобразование переменной в строкой тип,
	     	%.2f - указываем что переменная будет отображать только 2 цифры после запятой,
	     	double_sred_100km - переменная типа double, которую надо преобразовать в строковый тип */
		
	    Result.res_rash_100km.setText(str_res_rash_100km);
	    Result.res_rash.setText(str_res_rash);
	    Result.res_price.setText(str_res_price);
	    Result.res_price_1km.setText(str_res_price_1km);

 
	    /* Записываем строковые переменные в текстовые поля Name.., которые расположены в файле Result */
		
	   
	}	
}
